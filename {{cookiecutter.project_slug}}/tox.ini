[tox]
minversion = 3.14
envlist = py35-{test,runcmd}, py36-{test,runcmd}, py37-{test,runcmd}, py38-{test,runcmd}, py39-{test,runcmd}, run-{cmd,blackcheck,black,isort,isortcheck}, {%- if cookiecutter.sphinx_docs == 'y' %} docs, {%- endif %} coverage

[testenv:.tox]
envdir = {toxworkdir}/.tox


[testenv]
basepython =
    py39{% if cookiecutter.main_python == '3.9' %},run,{% if cookiecutter.sphinx_docs == 'y' %}docs,{% endif %}coverage,clean,bootstrap{% endif %}: python3.9
    py38{% if cookiecutter.main_python == '3.8' %},run,{% if cookiecutter.sphinx_docs == 'y' %}docs,{% endif %}coverage,clean,bootstrap{% endif %}: python3.8
    py37{% if cookiecutter.main_python == '3.7' %},run,{% if cookiecutter.sphinx_docs == 'y' %}docs,{% endif %}coverage,clean,bootstrap{% endif %}: python3.7
    py36{% if cookiecutter.main_python == '3.6' %},run,{% if cookiecutter.sphinx_docs == 'y' %}docs,{% endif %}coverage,clean,bootstrap{% endif %}: python3.6
    py35{% if cookiecutter.main_python == '3.5' %},run,{% if cookiecutter.sphinx_docs == 'y' %}docs,{% endif %}coverage,clean,bootstrap{% endif %}: python3.5
envdir =
    py39{% if cookiecutter.main_python == '3.9' %},run,{% if cookiecutter.sphinx_docs == 'y' %}docs,{% endif %}coverage{% endif %}: {toxworkdir}/py39
    py38{% if cookiecutter.main_python == '3.8' %},run,{% if cookiecutter.sphinx_docs == 'y' %}docs,{% endif %}coverage{% endif %}: {toxworkdir}/py38
    py37{% if cookiecutter.main_python == '3.7' %},run,{% if cookiecutter.sphinx_docs == 'y' %}docs,{% endif %}coverage{% endif %}: {toxworkdir}/py37
    py36{% if cookiecutter.main_python == '3.6' %},run,{% if cookiecutter.sphinx_docs == 'y' %}docs,{% endif %}coverage{% endif %}: {toxworkdir}/py36
    py35{% if cookiecutter.main_python == '3.5' %},run,{% if cookiecutter.sphinx_docs == 'y' %}docs,{% endif %}coverage{% endif %}: {toxworkdir}/py35
deps =
usedevelop = true
extras=
    dev
passenv = HOME CI TRAVIS TRAVIS_* GITHUB_* SPHINX_* COVERALLS* CODECOV* SPELLCHECK SSH_AUTH_SOCK http_proxy https_proxy no_proxy
description =
    py{35,36,37,38,39}-test: Run tests in the corresponding environment
    py{35,36,37,38,39}-runcmd: Run arbitrary command following "--" in the corresponding environment
commands_pre =
    python -V
commands =
    py{35,36,37,38,39}-runcmd: {posargs:python -c 'print("No command")'}
    py{35,36,37,38,39}-test: py.test {posargs:-vvv --doctest-modules --doctest-glob="*.rst" --doctest-glob="*.md" --cov={{ cookiecutter.project_slug }} --durations=10 -x -s src tests {%- if cookiecutter.sphinx_docs == 'y' %} docs {%- endif %} README.md CONTRIBUTING.md}


{%- if cookiecutter.sphinx_docs == 'y' %}


[testenv:docs]
description = Generate the docs
commands =
    python -m sphinx -W "docs/sources/" -d "docs/_build/doctree" {posargs: "docs/_build/html"}


{%- endif %}


[testenv:bootstrap]
description = Configure tox
envdir = {toxworkdir}/bootstrap
deps = tox
skip_install = True
commands_pre =
commands =
    python scripts/bootstrap.py


[testenv:clean]
description = Clean up
envdir = {toxworkdir}/clean_
deps =
skip_install = True
commands_pre =
whitelist_externals = tox
commands =
    python scripts/clean.py tests
    python scripts/clean.py build
{% if cookiecutter.sphinx_docs == 'y' %}
    python docs/clean.py
{% endif %}


[testenv:clean-tests]
description = Clean up files resulting from testing/coverage
envdir = {toxworkdir}/clean
deps =
skip_install = True
commands_pre =
commands =
    python scripts/clean.py tests


[testenv:clean-build]
description = Clean up build artifacts (including __pycache__ folders)
envdir = {toxworkdir}/clean
deps =
skip_install = True
commands_pre =
commands =
    python scripts/clean.py build


[testenv:coverage]
description = Generate a coverage report
depends = py37-test
commands =
    coverage html
    python -c 'import pathlib; print("coverage report available in \{\}".format(pathlib.Path(".") / "htmlcov" / "index.html"))'


[testenv:run-cmd]
description = Run arbitrary command following "--" in the current stable environment, e.g. "tox -e run-cmd -- ipython"
commands = {posargs:python -c 'print("No command")'}


[testenv:run-black]
description = Run black formatter in the current stable environment
commands = python -m black --skip-string-normalization --line-length {{ cookiecutter.linelength }} {posargs:src tests}


[testenv:run-blackcheck]
description = Run black formatter check in the latext venv
commands = python -m black --skip-string-normalization --line-length {{ cookiecutter.linelength }} --check --diff {posargs:src tests}


[testenv:run-isort]
description = Run isort formatter in the current stable environment
commands = python -m isort --recursive {posargs:src tests}


[testenv:run-isortcheck]
description = Run isort formatter check in the current stable environment
commands = python -m isort --recursive --check-only --diff {posargs:src tests}


[testenv:run-flake8]
description = Run flake8 formatter check in the current stable environment
commands = python -m flake8 {posargs:src tests}


[testenv:run-pylint]
description = Run pylint formatter check in the current stable environment
commands = python -m pylint -j 0 {posargs:src}
